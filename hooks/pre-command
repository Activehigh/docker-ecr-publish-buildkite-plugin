#!/usr/bin/env bash

set -euo pipefail

get_ecr_url() {
  local repository_name="$1"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].repositoryUri'
}

ecr_exists() {
  local repository_name="$1"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].registryId'
}

upsert_ecr() {
  local repository_name="$1"
  if ! ecr_exists "${repository_name}"; then
    aws ecr create-repository --repository-name "${repository_name}"
  fi
}

compute_tag() {
  local docker_file="$1"
  local sums=($(sha1sum "${docker_file}"))
  while IFS='=' read -r name _ ; do
    if [[ $name =~ ^(BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_CACHE_ON_[0-9]+) ]] ; then
      local sha=($(sha1sum "${!name}"))
      sums="${sums}${sha:-''}"
    fi
  done < <(env | sort)
  echo "${sums}" | sha1sum | cut -c-7
}

$(aws ecr get-login --no-include-email)
default_repository_name="build-cache/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
repository_name="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME:-${default_repository_name}}"
upsert_ecr "${repository_name}"
docker_file="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_DOCKERFILE:-Dockerfile}"
image_name="$(get_ecr_url ${repository_name}):$(compute_tag ${docker_file})"

if ! docker pull "${image_name}"; then
  echo "Image not cached, building"
  if [ "$BRANCH_NAME" == "$DEFAULT_BRANCH_NAME" ]; then
    docker build . --file "${docker_file}" -t "${image_name}" -t "latest" || exit 1
  else
    docker build . --file "${docker_file}" -t "${image_name}" || exit 1
  fi
  docker push "${image_name}"
fi || echo "Not found"

# Support using https://github.com/buildkite-plugins/docker-buildkite-plugin without an image
export BUILDKITE_PLUGIN_DOCKER_IMAGE="${image_name}"
