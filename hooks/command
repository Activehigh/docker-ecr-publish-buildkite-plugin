#!/usr/bin/env bash

set -euo pipefail

get_ecr_url() {
  local repository_name="${1}"

  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].repositoryUri'
}

read_build_args() {
  build_args=()

  if read_list_property 'ARGS'; then
    for arg in "${result[@]}"; do
      build_args+=('--build-arg' "${arg}")
    done
  fi
}

# read a plugin property of type [array, string] into a Bash array. Buildkite
# exposes a string value at BUILDKITE_PLUGIN_{NAME}_{KEY}, and array values at
# BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}.
read_list_property() {
  local prefix="BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_${1}"
  local property="${prefix}_0"

  result=()

  if [[ -n ${!property:-} ]]; then
    local i=0
    local property="${prefix}_${i}"

    while [[ -n ${!property:-} ]]; do
      result+=("${!property}")

      i=$((i+1))
      property="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    result+=("${!prefix}")
  fi

  [[ ${#result[@]} -gt 0 ]] || return 1
}

push_tags() {
  local tags="${1}"

  for tag in "${tags[@]}"; do
    echo "Tag: '${tag}'"
    docker tag "${image}" "${image}:${tag}"
    docker push "${image}:${tag}"
  done
}

dockerfile="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_DOCKERFILE:-Dockerfile}"

if [[ -z ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME:-} ]]; then
  echo "'ecr-name' property is required"
  exit 1
fi

image="$(get_ecr_url "${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME}")"

read_build_args

if [[ ${BUILDKITE_BRANCH} == "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}" ]]; then
  build_args+=('--build-arg' 'BRANCH_TYPE=master')
  tags=('latest')
  if read_list_property 'DEFAULT_TAGS'; then
    tags+=("${result[@]}")
  fi
else
  tags=()
  if read_list_property 'BRANCH_TAGS'; then
    tags+=("${result[@]}")
  fi
fi

echo '--- Building Docker image'
echo "Build args: ${build_args[*]}"
docker build --file "${dockerfile}" --tag "${image}" "${build_args[@]}" .

echo '--- Logging in to ECR'
$(aws ecr get-login --no-include-email)

echo '--- Pushing Docker image'
push_tags "${tags[@]}"
